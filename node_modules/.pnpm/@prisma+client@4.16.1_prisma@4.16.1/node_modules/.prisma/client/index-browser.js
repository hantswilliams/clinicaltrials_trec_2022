
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.1
 * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
 */
Prisma.prismaVersion = {
  client: "4.16.1",
  engine: "b20ead4d3ab9e78ac112966e242ded703f4a052c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TrialsScalarFieldEnum = {
  id: 'id',
  nct_id: 'nct_id',
  PMID: 'PMID',
  acronym: 'acronym',
  affiliation: 'affiliation',
  allocation: 'allocation',
  arm_group_label: 'arm_group_label',
  arm_group_type: 'arm_group_type',
  baseline: 'baseline',
  brief_title: 'brief_title',
  certain_agreements: 'certain_agreements',
  citation: 'citation',
  collaborator: 'collaborator',
  completion_date: 'completion_date',
  condition: 'condition',
  contact: 'contact',
  contact_backup: 'contact_backup',
  country: 'country',
  criteria: 'criteria',
  description: 'description',
  disposition_first_posted: 'disposition_first_posted',
  disposition_first_submitted: 'disposition_first_submitted',
  disposition_first_submitted_qc: 'disposition_first_submitted_qc',
  download_date: 'download_date',
  email: 'email',
  enrollment: 'enrollment',
  facility: 'facility',
  gender: 'gender',
  gender_based: 'gender_based',
  gender_description: 'gender_description',
  has_dmc: 'has_dmc',
  has_expanded_access: 'has_expanded_access',
  healthy_volunteers: 'healthy_volunteers',
  intervention_model: 'intervention_model',
  intervention_model_description: 'intervention_model_description',
  intervention_name: 'intervention_name',
  intervention_type: 'intervention_type',
  investigator: 'investigator',
  investigator_affiliation: 'investigator_affiliation',
  investigator_full_name: 'investigator_full_name',
  investigator_title: 'investigator_title',
  ipd_access_criteria: 'ipd_access_criteria',
  ipd_description: 'ipd_description',
  ipd_info_type: 'ipd_info_type',
  ipd_time_frame: 'ipd_time_frame',
  ipd_url: 'ipd_url',
  is_fda_regulated_device: 'is_fda_regulated_device',
  is_fda_regulated_drug: 'is_fda_regulated_drug',
  is_us_export: 'is_us_export',
  keyword: 'keyword',
  last_known_status: 'last_known_status',
  last_name: 'last_name',
  last_update_posted: 'last_update_posted',
  last_update_submitted: 'last_update_submitted',
  last_update_submitted_qc: 'last_update_submitted_qc',
  lead_sponsor: 'lead_sponsor',
  limitations_and_caveats: 'limitations_and_caveats',
  link_text: 'link_text',
  masking: 'masking',
  masking_description: 'masking_description',
  maximum_age: 'maximum_age',
  measure: 'measure',
  mesh_term: 'mesh_term',
  minimum_age: 'minimum_age',
  name_title: 'name_title',
  number_of_arms: 'number_of_arms',
  number_of_groups: 'number_of_groups',
  observational_model: 'observational_model',
  official_title: 'official_title',
  org_study_id: 'org_study_id',
  organization: 'organization',
  other_name: 'other_name',
  outcome_list: 'outcome_list',
  overall_status: 'overall_status',
  participant_flow: 'participant_flow',
  phase: 'phase',
  phone: 'phone',
  phone_ext: 'phone_ext',
  point_of_contact: 'point_of_contact',
  primary_completion_date: 'primary_completion_date',
  primary_purpose: 'primary_purpose',
  provided_document: 'provided_document',
  reported_events: 'reported_events',
  responsible_party_type: 'responsible_party_type',
  results_first_posted: 'results_first_posted',
  results_first_submitted: 'results_first_submitted',
  results_first_submitted_qc: 'results_first_submitted_qc',
  role: 'role',
  sampling_method: 'sampling_method',
  secondary_id: 'secondary_id',
  sharing_ipd: 'sharing_ipd',
  source: 'source',
  start_date: 'start_date',
  status: 'status',
  study_doc: 'study_doc',
  study_first_posted: 'study_first_posted',
  study_first_submitted: 'study_first_submitted',
  study_first_submitted_qc: 'study_first_submitted_qc',
  study_pop: 'study_pop',
  study_type: 'study_type',
  target_duration: 'target_duration',
  textblock: 'textblock',
  time_frame: 'time_frame',
  time_perspective: 'time_perspective',
  type: 'type',
  url: 'url',
  verification_date: 'verification_date',
  why_stopped: 'why_stopped'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  trials: 'trials'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
